//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""cat"",
            ""id"": ""93b34cef-69a1-4c7b-a624-cf70e74528f8"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""71ff49db-fa4f-45b0-8456-f4a12bf06ca6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""54e05d5c-22b6-46de-b0f2-efbcbf16761a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5d2ee4df-e8a0-43b3-a857-78f9259a0882"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7c314517-1b42-4865-baa5-3ef74afa04cc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6d9a52f1-2425-4d55-8d31-61c3dd968526"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fed19c1a-4850-43a8-bd9e-cdfeb59eff80"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""girl"",
            ""id"": ""3ac90cda-62d0-4fbb-a92a-0cbc85f4c86a"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""4f1ef415-77e7-4dd5-9bad-d433e0f169b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a8702354-eb1a-4528-a965-65c7a0559208"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0dda7f9a-6958-45cc-9308-d671428bd08b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abc6730d-1463-4834-9aa4-97854d75a972"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d4bbfdbc-90c5-459c-bfc3-e02149bd7bba"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c00bca9-2f0e-4eed-9855-0d2a0016e354"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // cat
        m_cat = asset.FindActionMap("cat", throwIfNotFound: true);
        m_cat_move = m_cat.FindAction("move", throwIfNotFound: true);
        // girl
        m_girl = asset.FindActionMap("girl", throwIfNotFound: true);
        m_girl_move = m_girl.FindAction("move", throwIfNotFound: true);
    }

    ~@InputManager()
    {
        UnityEngine.Debug.Assert(!m_cat.enabled, "This will cause a leak and performance issues, InputManager.cat.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_girl.enabled, "This will cause a leak and performance issues, InputManager.girl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // cat
    private readonly InputActionMap m_cat;
    private List<ICatActions> m_CatActionsCallbackInterfaces = new List<ICatActions>();
    private readonly InputAction m_cat_move;
    public struct CatActions
    {
        private @InputManager m_Wrapper;
        public CatActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_cat_move;
        public InputActionMap Get() { return m_Wrapper.m_cat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CatActions set) { return set.Get(); }
        public void AddCallbacks(ICatActions instance)
        {
            if (instance == null || m_Wrapper.m_CatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CatActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ICatActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ICatActions instance)
        {
            if (m_Wrapper.m_CatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICatActions instance)
        {
            foreach (var item in m_Wrapper.m_CatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CatActions @cat => new CatActions(this);

    // girl
    private readonly InputActionMap m_girl;
    private List<IGirlActions> m_GirlActionsCallbackInterfaces = new List<IGirlActions>();
    private readonly InputAction m_girl_move;
    public struct GirlActions
    {
        private @InputManager m_Wrapper;
        public GirlActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_girl_move;
        public InputActionMap Get() { return m_Wrapper.m_girl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GirlActions set) { return set.Get(); }
        public void AddCallbacks(IGirlActions instance)
        {
            if (instance == null || m_Wrapper.m_GirlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GirlActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IGirlActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IGirlActions instance)
        {
            if (m_Wrapper.m_GirlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGirlActions instance)
        {
            foreach (var item in m_Wrapper.m_GirlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GirlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GirlActions @girl => new GirlActions(this);
    public interface ICatActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IGirlActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
