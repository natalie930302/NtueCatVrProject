//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Brave Little Girl/girlControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GirlControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GirlControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""girlControl"",
    ""maps"": [
        {
            ""name"": ""girl"",
            ""id"": ""9a3c8f8a-637b-4c04-bd21-eabe63f075d7"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""6b835eee-e022-430f-94c7-0cfefed68fa6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0da1bcb4-7d65-4577-abaa-aac96e9541d5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5004f1af-06a3-402b-be6d-20f53f20a72f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5a9f2aad-277e-4a0e-87d6-43d3aad7b634"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bd02a8b0-705f-456a-8f3c-8517d8219f93"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ea0b2563-1a3c-40f7-b400-56d0c8191881"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // girl
        m_girl = asset.FindActionMap("girl", throwIfNotFound: true);
        m_girl_move = m_girl.FindAction("move", throwIfNotFound: true);
    }

    ~@GirlControl()
    {
        UnityEngine.Debug.Assert(!m_girl.enabled, "This will cause a leak and performance issues, GirlControl.girl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // girl
    private readonly InputActionMap m_girl;
    private List<IGirlActions> m_GirlActionsCallbackInterfaces = new List<IGirlActions>();
    private readonly InputAction m_girl_move;
    public struct GirlActions
    {
        private @GirlControl m_Wrapper;
        public GirlActions(@GirlControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_girl_move;
        public InputActionMap Get() { return m_Wrapper.m_girl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GirlActions set) { return set.Get(); }
        public void AddCallbacks(IGirlActions instance)
        {
            if (instance == null || m_Wrapper.m_GirlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GirlActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IGirlActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IGirlActions instance)
        {
            if (m_Wrapper.m_GirlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGirlActions instance)
        {
            foreach (var item in m_Wrapper.m_GirlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GirlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GirlActions @girl => new GirlActions(this);
    public interface IGirlActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
